{
    "format": "EDI-X12",
    "315": {
        "Source Occurs": "1...1",
        "Description": "X12 315 Ocean shipment status"
    },
    "CONSTANT[8ad4ce50-f5e5-4697-95a4-9dbcd6e94d06]": {
        "Output Path": "#data",
        "Output Element": "id",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "8ad4ce50-f5e5-4697-95a4-9dbcd6e94d06",
        "Mapping Notes/Rules": "Hard code \"8ad4ce50-f5e5-4697-95a4-9dbcd6e94d06\" to Target"
    },
    "CONSTANT[multienterprise-process-connect:canonicalOceanShipmentStatus]": {
        "Output Path": "#data",
        "Output Element": "schemaId",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "multienterprise-process-connect:canonicalOceanShipmentStatus",
        "Mapping Notes/Rules": "Hard code \"multienterprise-process-connect:canonicalOceanShipmentStatus\" to Target"
    },
    "CONSTANT[canonicalOceanShipmentStatus]": {
        "Output Path": "#data",
        "Output Element": "objectType",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "canonicalOceanShipmentStatus",
        "Mapping Notes/Rules": "Hard code \"canonicalOceanShipmentStatus\" to Target"
    },
    "CONSTANT[1]": {
        "Output Path": "#data",
        "Output Element": "schemaVersion",
        "Target Occurs": "1...1",
        "Target Format": "numeric",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1",
        "Mapping Notes/Rules": "Hard code \"1\" to Target"
    },
    "ISA": {
        "Source Occurs": "1...1",
        "Description": "ISA interchange envelope.",
        "Mapping Notes/Rules": "The ISA envelope is a fixed length segment with delimiters. Even if a value is not available for any optional field it is padded out to its full length with spaces. ISA is the only fixed length segment in the X12 interchange."
    },
    "CONSTANT[MPC_OCEAN_SHIPMENT_STATUS]": {
        "Description": "Hardcode ocean shpment status transaction type",
        "Output Path": "#/data/controlFileHeader",
        "Output Element": "b2bTransactionTypeName",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "MPC_OCEAN_SHIPMENT_STATUS",
        "Required": "X",
        "Mapping Notes/Rules": "Hard code \"MPC_OCEAN_SHIPMENT_STATUS\" to target data element"
    },
    "ISA01": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Qualifier for authorization control number in ISA02.",
        "Sample Input Data/Codes": "00",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "authorizationInformationType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "00",
        "Mapping Notes/Rules": "Store literal value. (Remove the restriction list of the restriction list of both source and target)"
    },
    "ISA02": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "10/10",
        "Description": "Information used for additional identification or authorization of the interchange sender or the data in the interchange/ 10 spaces a valid entry.",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "authorizationInformationValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "ISA03": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Qualifier for security information in ISA04.",
        "Sample Input Data/Codes": "00",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "securityInformationType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "00",
        "Mapping Notes/Rules": "Store literal value if present. (Remove the restriction list of the restriction list of both source and target)"
    },
    "ISA04": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "10/10",
        "Description": "Identifies security information about the interchange sender or data",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "securityInformationValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "ISA05": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Source Code List": "X12_EnvelopePartyType:ExternalCode",
        "Description": "Interchange sender partner ID qualifier. Valid values include:\n\n01 - DUNS\n07 - GLN\n08 - UCC EDI communications ID (GLN?)\n11 - DEA\n16 - DUNS+4\n20 - HIN\nZZ - Mutually defined",
        "Sample Input Data/Codes": "07",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope/fileSenderType",
        "Output Element": "ediEnvelopePartyType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "X12_EnvelopePartyType:CanonicalCode",
        "Sample Output Data/Codes": "GLN",
        "Mapping Notes/Rules": "Convert from X12 source to canonical target value. Use the X12 envelope party identifier type lookup table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_X12EnvelopePartyType.txt with java. \n \nIf source value missing or is not included in list of valid qualifiers, throw error:\n \n\"Valid X12 interchange party identifier type in ISA05 is required !!!\""
    },
    "ISA06(1)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "15/15",
        "Description": "Instance 1 interchange sender identification mapping to fileSenderNumber with party type defined in ISA05.",
        "Sample Input Data/Codes": "7777776067344",
        "Output Path": "#/data/controlFileHeader",
        "Output Element": "fileSenderNumber",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "GLN:7777776067344",
        "Required": "X",
        "Mapping Notes/Rules": "Concatenate converted ISA05 + \":\" + ISA06. Trim source of trailing spaces if exist."
    },
    "ISA06(2)": {
        "Description": "Instance 2 interchange sender identification mapping to linkIdentifier",
        "Sample Input Data/Codes": "7777776067344",
        "Output Path": "#/data/controlFileHeader",
        "Output Element": "linkIdentifier",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "MPC.GLN:7777776067344.GLN:888888404358877",
        "Mapping Notes/Rules": "Concatenate \"MPC\" + \".\" + [ISA05] + \":\" + [ISA06] + \".\" + [ISA07] + \":\"  + [ISA08]\n\nNote:  ISA05 and ISA07 convert from X12 to canonical, see enum worksheet on Row 24"
    },
    "ISA06(3)": {
        "Description": "Instance 3 interchange sender identification mapping to x12InterchangeControlEnvelope for sender in X12 control file header.",
        "Sample Input Data/Codes": "7777776067344",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope/fileSenderType",
        "Output Element": "ediInterchangePartyValue",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "'7777776067344",
        "Mapping Notes/Rules": "Store literal value.  Trim source of trailing spaces if exist."
    },
    "ISA06(4)": {
        "Description": "Instance 4 interchange sender identification mapping to carrier party to identify as sender in MINT UI",
        "Sample Input Data/Codes": "7777776067344",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/carrierInformation/mpcCompanyLocationIdentifierList",
        "Output Element": "companyIdentifierValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "3333331013655",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "CONSTANT[COMPANYID]": {
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/shipperBusinessInformation/mpcCompanyLocationIdentifierList",
        "Output Element": "companyIdentifierType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_CompanyLocationIDType:CanonicalCode",
        "Sample Output Data/Codes": "COMPANYID",
        "Mapping Notes/Rules": "Hardcode \"COMPANYID\" to target"
    },
    "ISA07": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Source Code List": "X12_EnvelopePartyType:ExternalCode",
        "Description": "Interchange receiver partner ID qualifier. Valid values include:\n\n01 - DUNS\n07 - GLN\n08 - UCC EDI communications ID (GLN?)\n11 - DEA\n16 - DUNS+4\n20 - HIN\nZZ - Mutually defined",
        "Sample Input Data/Codes": "01",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope/fileReceiverType",
        "Output Element": "ediEnvelopePartyType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "X12_EnvelopePartyType:CanonicalCode",
        "Sample Output Data/Codes": "DUNS",
        "Mapping Notes/Rules": "Convert from X12 source to canonical target value. Use the X12 envelope party identifier type lookup table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_X12EnvelopePartyType.txt with java. \n \nIf source value missing or is not included in list of valid qualifiers, throw error:\n \n\"Valid X12 interchange party identifier type in ISA07 is required !!!\""
    },
    "ISA08(1)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "15/15",
        "Description": "Instance 1 EDI receiver ID mapping to file control header and to ServiceLinkId.",
        "Sample Input Data/Codes": "888888404358877",
        "Output Path": "#/data/controlFileHeader",
        "Output Element": "fileReceiverNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "DUNS:888888404358877",
        "Required": "X",
        "Mapping Notes/Rules": "Concatenate converted ISA07 + \":\" + ISA08. Trim source of trailing spaces if exist."
    },
    "ISA08(2)": {
        "Description": "Instance 2 interchange receiver identification mapping to ediInterchangePartyValue for receiver in X12 control file header.",
        "Sample Input Data/Codes": "888888404358877",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope/fileReceiverType",
        "Output Element": "ediInterchangePartyValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "888888404358877",
        "Required": "X",
        "Mapping Notes/Rules": "Store literal value from source to target. Trim source of trailing spaces if exist."
    },
    "ISA08(3)": {
        "Description": "Instance 3 interchange sender identification mapping to consignee party to identify as sender in MINT UI",
        "Sample Input Data/Codes": "888888404358877",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/shipperBusinessInformation/mpcCompanyLocationIdentifierList",
        "Output Element": "companyIdentifierValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "888888404358877",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "ISA09": {
        "Source Occurs": "1...1",
        "Source Format": "date",
        "Source Length": "6/6",
        "Description": "Interchange date in 6 char YYMMDD format",
        "Sample Input Data/Codes": "231020",
        "Output Path": "#/data/controlFileHeader",
        "Output Element": "fileDateTime",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2023-10-20T14:20:00.000Z",
        "Required": "X",
        "Mapping Notes/Rules": "Convert and concatenate from source X12 ISA09 + ISA10 to canonical datetime format YYYY-MM-DDTHH:MM:SS.nnnZ and store result in target data element."
    },
    "ISA10": {
        "Source Occurs": "1...1",
        "Source Format": "time",
        "Source Length": "4/4",
        "Description": "Interchange time in 4 char HHMM format",
        "Sample Input Data/Codes": "1420",
        "Mapping Notes/Rules": "Do not map."
    },
    "ISA11": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Description": "This value is dependent on X12 version.\n\n- Version 4012 and earlier, this is the interchange control standards identifier. Valid value = U.\n\n- Version 4020 and later, this is the repetition separator, a delimiter that separates repeated occurrences of a data element or composite data structure, which must be different than the data element separator, component separator, and segment terminator.\"",
        "Sample Input Data/Codes": "^",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "repetitionSeparator",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "^",
        "Mapping Notes/Rules": "Store literal value"
    },
    "ISA12": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "5/5",
        "Description": "Interchange control version number. This could be any X12 version.",
        "Sample Input Data/Codes": "00501",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "interchangeControlVersion",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "00501",
        "Mapping Notes/Rules": "Store literal value."
    },
    "ISA13(1)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "9/9",
        "Description": "Instance 1 interchange Control Number mapping to file control header",
        "Sample Input Data/Codes": "0000000000619827",
        "Output Path": "#/data/controlFileHeader",
        "Output Element": "fileControlNumber",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "0000000000619827",
        "Required": "X",
        "Mapping Notes/Rules": "Store literal value."
    },
    "ISA13(2)": {
        "Description": "Instance 2 Interchange Control Number mapping to X12 control file header interchangeControlIdentifier.",
        "Sample Input Data/Codes": "0000000000619827",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "interchangeControlIdentifier",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "1/*",
        "Sample Output Data/Codes": "0000000000619827",
        "Mapping Notes/Rules": "Store literal value."
    },
    "ISA14": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Description": "Interchange level acknowledgement requested. Valid values include:\n\n0 - No acknowledgement requested\n1 - Interchange level acknowledgement requested",
        "Sample Input Data/Codes": "0",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "isAcknowledgmentRequired",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Sample Output Data/Codes": "false",
        "Mapping Notes/Rules": "If source = \"0\", move \"false\" to target\nIf source = \"1\", move \"true\" to target"
    },
    "ISA15": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Description": "Indicates whether the interchange is for production, test, or information purposes. Valid values include:\n\nI - Information\nP - Production data\nT - Test data",
        "Sample Input Data/Codes": "P",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "usageIndicator",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "P",
        "Mapping Notes/Rules": "Store literal value. (Remove the restriction list of the restriction list of both source and target)"
    },
    "ISA16": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Description": "Component element separator. Delimiter that separates data elements within a composite data structure. Must be different than the data element separator and segment terminator",
        "Sample Input Data/Codes": ">",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12InterchangeControlEnvelope",
        "Output Element": "componentSeparator",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": ">",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GS": {
        "Source Occurs": "1...*",
        "Description": "GS group functional envelope. Child of ISA. Only one GS group expected per interchange."
    },
    "GS01": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "GS group function code. Valid value = QO\nOcean Shipment Status Information",
        "Sample Input Data/Codes": "QO",
        "Mapping Notes/Rules": "Do not map."
    },
    "GS02": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/15",
        "Description": "Application Sender's Code.",
        "Sample Input Data/Codes": "2222224043588",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "groupSenderNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2222224043588",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GS03": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/15",
        "Description": "Application Receiver's Code.",
        "Sample Input Data/Codes": "TRACELINK",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "groupReceiverNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "TRACELINK",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GS04": {
        "Source Occurs": "1...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Current date stamp in 8 char X12 date format YYYYMMDD.",
        "Sample Input Data/Codes": "20241020",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "groupDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2024-10-20",
        "Mapping Notes/Rules": "Store date in YYYY-MM-DD format"
    },
    "GS05": {
        "Source Occurs": "1...1",
        "Source Format": "time",
        "Source Length": "4/8",
        "Description": "Current time stamp in 6 char X12 time format HHMMSS.",
        "Sample Input Data/Codes": "142000",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "groupTime",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "14:20:00.000Z",
        "Mapping Notes/Rules": "Store time in HH:MM:SS.nnnZ format"
    },
    "GS06": {
        "Source Occurs": "1...1",
        "Source Format": "integer",
        "Source Length": "1/9",
        "Description": "Group Control ID Number.",
        "Sample Input Data/Codes": "619827",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "groupControlNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "619827",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GS07": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Description": "Responsible Agency Code. Valid values:\nT = Transportation Data Coordinating Committee (TDCC)\nX = Accredited Standards Committee X12",
        "Sample Input Data/Codes": "X",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "x12AgencyCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "X",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GS08": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/12",
        "Description": "X12 message version code. This could be any X12 version.",
        "Sample Input Data/Codes": "005010",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12FunctionalGroupControlEnvelope",
        "Output Element": "ediMessageVersionCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "005010",
        "Mapping Notes/Rules": "Store literal value."
    },
    "ST": {
        "Source Occurs": "1...*",
        "Description": "ST transaction set envelope. Child of GS group. Only one ST transaction expected."
    },
    "ST01": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "3/3",
        "Description": "Transaction set identifier code.",
        "Sample Input Data/Codes": "315",
        "Mapping Notes/Rules": "Do not map."
    },
    "ST02": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "4/9",
        "Description": "Transaction set ID number. Counter for each ST segment beginning with 1.",
        "Sample Input Data/Codes": "0001",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TransactionSetEnvelope",
        "Output Element": "transactionSetControlNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "0001",
        "Mapping Notes/Rules": "Store literal value."
    },
    "B4": {
        "Source Occurs": "1...1",
        "Description": "Ocean Shipment Status beginning segment for Inquiry or Reply"
    },
    "CONSTANT[\"ORIGINAL\"]": {
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "processingFunctionTypeCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_ProcessingFunctionTypeCode",
        "Sample Output Data/Codes": "ORIGINAL",
        "Mapping Notes/Rules": "Hardcode \"ORIGINAL\" to target tdata element."
    },
    "B402": {
        "Source Occurs": "0...1",
        "Source Format": "number",
        "Source Length": "1/3",
        "Description": "Inquirer assigned identifying number",
        "Sample Input Data/Codes": "1",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/transactionReferenceIdentifierList",
        "Output Element": "b2bTransactionIdentifierValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1",
        "Mapping Notes/Rules": "Store literal value to target if B402 present, Else \n\nIf source missing, map current date time in YYYYMMDDTHHMMSSnnn format.\n\nNote:   When the outbound X12 transform is built, it should *NOT* map this element since the value may be created in IB Transform.\nIn the unlikely event that a partner does send it in."
    },
    "CONSTANT[\"OCEANSHIPMENTSTATUS\"]": {
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/transactionReferenceIdentifierList",
        "Output Element": "b2bTransactionIdentifierType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "OCEANSHIPMENTSTATUS",
        "Mapping Notes/Rules": "Hard code \"OCEANSHIPMENTSTATUS\" to target data element"
    },
    "B403": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Source Code List": "CL_TransactionStatusCode",
        "Description": "Shipment status code, valid values include\n\n- AE = Loaded on vessel\n- AF = Carrier Departed Pickup Location with Shipment\n- I = In-Gate\n- L = Loading\n- K = Arrived at Customs\n- K3 = Complete Customs Paperwork has been Provided\n- OA = Out gate",
        "Sample Input Data/Codes": "AE",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "transactionStatusCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_TransactionStatusCode",
        "Sample Output Data/Codes": "LOADEDONVESSEL",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the transaction status code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_TransactionStatusCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Transaction status code is Invalid !!!\""
    },
    "B404": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Date of last reported status of cargo in YYYYMMDD format",
        "Sample Input Data/Codes": "20070609",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "dateReported",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "20070609",
        "Mapping Notes/Rules": "If B404 and B405 are present, map to target from B404 and B405 in format YYYY-MM-DDTHH:MM:SS.nnnZ \n\nIf B404 is present and B405 is missing, map to target from B404 in date format YYYY-MM-DD"
    },
    "B404(1)": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Date of last reported status of cargo in YYYYMMDD format",
        "Sample Input Data/Codes": "20070609",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/transactionReferenceIdentifierList",
        "Output Element": "transactionDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "20070609",
        "Mapping Notes/Rules": "If B404 and B405 are present, map to target from B404 and B405 in format YYYY-MM-DDTHH:MM:SS.nnnZ when b2bTransactionIdentifierType = \"OCEANSHIPMENTSTATUS\"\nIf B404 is present and B405 is missing, map to target from B404 in date format YYYY-MM-DD when b2bTransactionIdentifierType = \"OCEANSHIPMENTSTATUS\"\nelse do nothing"
    },
    "B405": {
        "Source Occurs": "0...1",
        "Source Format": "time",
        "Source Length": "'4/8",
        "Description": "Transaction time in hhmmss format",
        "Sample Input Data/Codes": "131204",
        "Mapping Notes/Rules": "Do not map"
    },
    "B406": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "3/5",
        "Description": "Airport code in case of air shipment or carrier terminal code in case of ground transportation, status location",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "statusLocation",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "Store literal value to target, if present."
    },
    "B407": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/4",
        "Description": "Prefix or alphabetic part of an equipment unit's identifying number",
        "Sample Input Data/Codes": "HASU",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "equipmentPrefix",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "'HASU",
        "Mapping Notes/Rules": "Store literal value to target, if present."
    },
    "B408": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/15",
        "Description": "Serial number part of an equipment unit's identifying numbe",
        "Sample Input Data/Codes": "483190",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "equipmentIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "483190",
        "Mapping Notes/Rules": "Store literal value to target, if present."
    },
    "B409": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Source Code List": "CL_EquipmentStatusCode",
        "Description": "Carrier status code. Valid values include:\n\n- L = Load\n- E = Empty\n- AA = Empty and Available at Pool\n- AK = Out of Service",
        "Sample Input Data/Codes": "L",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "equipmentStatusCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_EquipmentStatusCode",
        "Sample Output Data/Codes": "LOAD",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the Equipment status code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_EquipmentStatusCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Equipment status code is invalid in B409 !!!\"",
        "Testing Notes": "u"
    },
    "B410": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "4/4",
        "Description": "A 4-character ISO 6346 equipment type code, represents type of equipment",
        "Sample Input Data/Codes": "22G1",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "equipmentTypeISOCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "22G1",
        "Mapping Notes/Rules": "Store literal value to target, if present."
    },
    "B411": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/30",
        "Description": "Location Identifier",
        "Sample Input Data/Codes": "USLGB",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "oceanShipmentLocationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "USLGB",
        "Mapping Notes/Rules": "Store literal value to target, if present."
    },
    "B412": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Source Code List": "CL_LocationCode",
        "Description": "Location qualfiier, indicating type of location, valid values include:\n\n- CI = City code\n- D = Domestic U.S. ports (Schedule D)\n- K = Foreign ports (Schedule K), and international\n- UN = United Nations Location Code",
        "Sample Input Data/Codes": "CI",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "oceanShipmentLocationCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_LocationCode",
        "Sample Output Data/Codes": "CITY",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the Location code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_LocationCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Location code is invalid in B412 !!!\""
    },
    "B413": {
        "Source Occurs": "0...1",
        "Source Format": "number",
        "Source Length": "1/1",
        "Description": "Equipment check digit number",
        "Sample Input Data/Codes": "1",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "checkDigitIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1",
        "Mapping Notes/Rules": "Store literal value to target, if present."
    },
    "N9(1)": {
        "Source Occurs": "0...30",
        "Description": "Reference segment for mapping to the transaction references."
    },
    "N901": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Source Code List": "CL_TransactionReferenceType",
        "Description": "Reference identification qualifier for the contract clas. Valid values include:\n\n- SCA - Carrier SCAC code",
        "Sample Input Data/Codes": "SCA",
        "Mapping Notes/Rules": "Do not map"
    },
    "N902": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/80",
        "Description": "Reference identifier value:",
        "Sample Input Data/Codes": "123456",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader",
        "Output Element": "carrierCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "123456",
        "Mapping Notes/Rules": "Store literal value when N901= SCA. Else do not map."
    },
    "N903": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/45",
        "Description": "Description defined by qualifier code in REF02",
        "Mapping Notes/Rules": "Do not map"
    },
    "N9(2)": {
        "Source Occurs": "0...30",
        "Description": "Reference segment for mapping to the transaction references."
    },
    "N9(3)": {
        "Source Occurs": "0...30",
        "Description": "Reference segment for mapping to the transaction references."
    },
    "Q2": {
        "Source Occurs": "0...1",
        "Description": "Vessel details"
    },
    "Q201": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/8",
        "Description": "Vessel unique identifier",
        "Sample Input Data/Codes": "9399193",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "vesselIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "9399193",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "Q202": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Description": "Vessel registered country code",
        "Sample Input Data/Codes": "UK",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "countryCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "UK",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "Q203": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Required Pier date / loading cut off date",
        "Sample Input Data/Codes": "20250803",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "pierdate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2025-08-03",
        "Mapping Notes/Rules": "Store in format YYYY-MM-DD, if present."
    },
    "Q204": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Vessel departure date",
        "Sample Input Data/Codes": "20250804",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "departureDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2025-08-04",
        "Mapping Notes/Rules": "Store in format YYYY-MM-DD, if present."
    },
    "Q205": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Shipment unloaded date",
        "Sample Input Data/Codes": "20250902",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "unloadingDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2025-09-02",
        "Mapping Notes/Rules": "Store in format YYYY-MM-DD, if present."
    },
    "Q206": {
        "Source Occurs": "0...1",
        "Source Format": "number",
        "Source Length": "1/7",
        "Description": "Lading quantity",
        "Sample Input Data/Codes": "12",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "ladingQuantity",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "12",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "Q207": {
        "Source Occurs": "0...1",
        "Source Format": "number",
        "Source Length": "1/10",
        "Description": "Weight for qualifier",
        "Sample Input Data/Codes": "10",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "weightValue",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "10",
        "Mapping Notes/Rules": "Store literal value if Q208 is valid."
    },
    "Q208": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Source Code List": "CL_WeightType",
        "Description": "Total cargo weight for bill of lading events or total cargo weight for container (if available). Valid values include:\n\n- FR = Freight weight\n- LC = Maximum lading capacity\n- G = Gross weight",
        "Sample Input Data/Codes": "FR",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "weightType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_WeightType",
        "Sample Output Data/Codes": "FREIGHT",
        "Mapping Notes/Rules": "if source is present , Convert from X12 source to canonical target value. Use the weight type lookup table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_WeightType.txt with java. \n\nIf source value invalid, throw error:\n\n\"Valid weight type is required in Q208 !!!\""
    },
    "Q209": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/30",
        "Description": "Voyage identifier on which the cargo travels",
        "Sample Input Data/Codes": "073E",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "voyageIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "073E",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "Q210(1)": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Source Code List": "CL_TransactionReferenceType",
        "Description": "Transaction reference type for X12 segments REF and N9 and EDIFACT RFF for general reference data that is not a transaction document identifier. Valid values include:\n\n- SCA",
        "Sample Input Data/Codes": "SCA",
        "Mapping Notes/Rules": "Do not map"
    },
    "Q211(1)": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/80",
        "Description": "Reference Identification",
        "Sample Input Data/Codes": "SCA2324",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "carrierCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "SCA2324",
        "Mapping Notes/Rules": "Store literal value when Q210(1)= SCA."
    },
    "Q210(2)": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Source Code List": "CL_TransactionReferenceType",
        "Description": "Transaction reference type for X12 segments REF and N9 and EDIFACT RFF for general reference data that is not a transaction document identifier. Valid values include:\n\n- EQ",
        "Sample Input Data/Codes": "EQ",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "transactionReferenceType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_TransactionReferenceType",
        "Sample Output Data/Codes": "EQUIPMENTIDENTIFIER",
        "Mapping Notes/Rules": "if source is present and not equal to SCA, convert from source to target value. Use the transaction reference type table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_TransactionReferenceType.txt with java. \n\nElse if source is invalid, do nothing"
    },
    "Q211(2)": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/80",
        "Description": "Reference Identification",
        "Sample Input Data/Codes": "SCA2324",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "transactionReferenceIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "SCA2324",
        "Mapping Notes/Rules": "Store literal value when transactionReferenceType is valid. Else do not map."
    },
    "Q212": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Description": "Vessel code qualifier, organization provides vessel unique identifier, valid values:\n\n- B = U.S. Bureau of Census\n- C = Ship's Radio Call Signal\n- L = Lloyd's Register of Shipping\n- Z = Mutually defined number",
        "Sample Input Data/Codes": "B",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "vesselCodeType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "UK",
        "Mapping Notes/Rules": "If source = \"B\" hard code \"USBUREAU\" to target\nIf source = \"C\" hard code \"SHIPSRADIO\" to target\nIf source = \"L\" hard code \"LLOYD\" to target\nIf source = \"Z\" hard code \"MUTUALLYDEFINED\" to target\n\nElse if source is invalid, do nothing"
    },
    "Q213": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/28",
        "Description": "Vessel name",
        "Sample Input Data/Codes": "CMA CGM LIBRA",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "vesselName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "CMA CGM LIBRA",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "Q214": {
        "Source Occurs": "0...1",
        "Source Format": "number",
        "Source Length": "1/8",
        "Description": "vessel volume value",
        "Sample Input Data/Codes": "10",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "volumeValue",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "10",
        "Mapping Notes/Rules": "Store literal value if Q215 is valid."
    },
    "Q215": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Source Code List": "CL_VolumeType",
        "Description": "Type of volume recorded. Valid values include:\n\n- B = Volume of barge\n- T = Volume of container\n- C = Cubic centimeters\n- M = Cubic decimeters",
        "Sample Input Data/Codes": "B",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "volumeType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_VolumeType",
        "Sample Output Data/Codes": "BARGE",
        "Mapping Notes/Rules": "if source is present , Convert from X12 source to canonical target value. Use the volume type lookup table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_VolumeType.txt with java. \n\nIf source value invalid, throw error:\n\n\"Valid volume type is required in Q215 !!!\""
    },
    "Q216": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Source Code List": "CL_WeightUnitTypeCode",
        "Description": "Weight unit of measure , valid values include:\n\n- E = Metric ton\n- G = Grams\n- K = Kilograms",
        "Sample Input Data/Codes": "E",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/vesselDetails",
        "Output Element": "weightUnitType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_WeightUnitTypeCode",
        "Sample Output Data/Codes": "FREIGHT",
        "Mapping Notes/Rules": "if source is present , Convert from X12 source to canonical target value. Use the weight unit type lookup table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_WeightUnitTypeCode.txt with java. \n\nIf source value invalid, throw error:\n\n\"Valid weight unit type is required in Q216 !!!\""
    },
    "SG": {
        "Source Occurs": "0...15",
        "Description": "Shipment wise status details"
    },
    "SG01": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Source Code List": "CL_TransactionStatusCode",
        "Description": "Shipment status code valid values inlcuding:\n\n- AC = Awaiting clearance\n- AE = Loaded on vessel\n- 4 = Shipment delivered with damage noted by carrier or consignee\n- 1 = Shipment was delivered with missing piece or pieces\n- B = Shipment was in operative, equipment failed.\n- CH = Customs hold",
        "Sample Input Data/Codes": "AC",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/oceanShipmentStatusDetails",
        "Output Element": "transactionStatusCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_TransactionStatusCode",
        "Sample Output Data/Codes": "AWAITINGCLEARANCE",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the transaction status code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_TransactionStatusCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Transaction status code is Invalid in SG01 !!!\""
    },
    "SG02": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "3/3",
        "Source Code List": "CL_TransactionStatusReasonCode",
        "Description": "Reason indicating why a shipment status code was transmitted, valid values including:\n\n- 052 = Import Container Delay\n- A03 = Incorrect Address\n- A07 = Refused by Consignee\n- A10 = Damaged - Delivery Not Completed\n- A15 = Business On Strike\n- A27 = Driver Related",
        "Sample Input Data/Codes": "A03",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/oceanShipmentStatusDetails",
        "Output Element": "transactionStatusReasonCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_TransactionStatusReasonCode",
        "Sample Output Data/Codes": "INCORRECTADDRESS",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the transaction status reason code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_TransactionStatusReasonCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Transaction status reason code is invalid in SG02 !!!\""
    },
    "SG03": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Description": "Code indicating the effective action taken on bill of lading, X12 pass throgh",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/oceanShipmentStatusDetails",
        "Output Element": "billOfLadingDispositionCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "SG04": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Date of reported status of shipment in YYYYMMDD format",
        "Sample Input Data/Codes": "20070609",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/oceanShipmentStatusDetails",
        "Output Element": "shipmentStatusDateString",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2007-06-09",
        "Mapping Notes/Rules": "If SG04 and SG05 are present, map to target from SG04 and SG05 in format YYYY-MM-DDTHH:MM:SS.nnnZ.\nIf SG04 is present and SG05 is missing, map to target from SG04 in date format YYYY-MM-DD.\nelse do nothing"
    },
    "SG05": {
        "Source Occurs": "0...1",
        "Source Format": "time",
        "Source Length": "'4/8",
        "Description": "Time of reported status of shipment in hhmmss format",
        "Sample Input Data/Codes": "131204",
        "Mapping Notes/Rules": "Do not map"
    },
    "SG06": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Time zone",
        "Sample Input Data/Codes": "CT",
        "Output Path": "#/data/canonicalOceanShipmentStatusHeader/oceanShipmentStatusDetails",
        "Output Element": "timeZone",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "R4": {
        "Source Occurs": "1...20",
        "Description": "Port or terminal details"
    },
    "CONSTANT[Incremental value]": {
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails",
        "Output Element": "lineItemNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "For each iteration of R4, increment the value and map it to target"
    },
    "R401": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/1",
        "Source Code List": "CL_PortOrTerminalFunctionCode",
        "Description": "Port or Terminal function codes , valid values inlcude:\n\n-  = Origin\n- L = Port of Loading\n- D = Port of Discharge\n- T = Transshipment Port\n- B = Reconsolidation Point",
        "Sample Input Data/Codes": "O",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "portOrTerminalFunctionCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_PortOrTerminalFunctionCode",
        "Sample Output Data/Codes": "ORIGIN",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the Port or terminal function code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_PortOrTerminalFunctionCode.txt with java. \n\nElse if source is not present or invalid throw error:\n\n\"Valid port or terminal function code is required in R401 !!!"
    },
    "R402": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/2",
        "Source Code List": "CL_LocationCode",
        "Description": "Port Location qualfiier, indicating type of location, valid values include:\n\n- CI = City code\n- D = Domestic U.S. ports (Schedule D)\n- K = Foreign ports (Schedule K), and international\n- UN = United Nations Location Code",
        "Sample Input Data/Codes": "CI",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "oceanShipmentLocationCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_LocationCode",
        "Sample Output Data/Codes": "CITY",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the Location code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_LocationCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Location code is invalid in R402 !!!\""
    },
    "R403": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/30",
        "Description": "Port Location Identifier",
        "Sample Input Data/Codes": "USLGB",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "oceanShipmentLocationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "USLGB",
        "Mapping Notes/Rules": "Store literal value to target, if R402 is valid"
    },
    "R404": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/24",
        "Description": "Port name",
        "Sample Input Data/Codes": "USPort",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "portName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "USPort",
        "Mapping Notes/Rules": "Store literal value if present"
    },
    "R405": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Description": "Port located country code",
        "Sample Input Data/Codes": "US",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "countryCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "US",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "R406": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/20",
        "Description": "Terminal name",
        "Sample Input Data/Codes": "Terminal",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "terminalName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "Terminal",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "R407": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/4",
        "Description": "Pier Number",
        "Mapping Notes/Rules": "Do not map"
    },
    "R408": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "State or Province code",
        "Sample Input Data/Codes": "TX",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/portOrTerminalDetails",
        "Output Element": "state",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "TX",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "DTM": {
        "Source Occurs": "0...15",
        "Description": "Dates relevant to shipments events at port",
        "Mapping Notes/Rules": "create instance of mpcDates only DTM01 is present and valid, else do not create mpcDates instance."
    },
    "DTM01": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "3/3",
        "Source Code List": "CL_Datetype",
        "Description": "Date type qualifier for shipment events in R4-DTM loop. Valid values include:\n\n- 139 = Estimated\n- 140 = Actual\n- 369 = Estimated Departure Date\n- 370 = Actual Departure date\n- 371 = Estimated Arrrivale date",
        "Sample Input Data/Codes": "'139",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/mpcDates/mpcDates",
        "Output Element": "dateType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_Datetype",
        "Sample Output Data/Codes": "ESTIMATED",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the date type code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_DateType.txt with java. \n\nElse if source is in valid , do not map"
    },
    "DTM02": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Contract date in date format YYYYMMDD",
        "Sample Input Data/Codes": "20240628",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/mpcDates/mpcDates",
        "Output Element": "dateValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2024-06-28",
        "Mapping Notes/Rules": "If DTM02 and DTM03 are present, map datetime value to target in date time format YYYY-MM-DDTHH:MM:SS.nnnZ when dateType is valid\nIf DTM02 is present and DTM03 is missing, map date value to target from DTM02 in date format YYYY-MM-DD when dateType is valid\n\nElse do not map."
    },
    "DTM03": {
        "Source Occurs": "0...1",
        "Source Format": "time",
        "Source Length": "4/8",
        "Description": "Contract time in time format HHMMSS",
        "Sample Input Data/Codes": "123422",
        "Mapping Notes/Rules": "Do not map."
    },
    "DTM04": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Time zone code",
        "Sample Input Data/Codes": "CT",
        "Output Path": "#/data/canonicalOceanShipmentStatusDetails/mpcDates/mpcDates",
        "Output Element": "timeZone",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "CT",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "V9": {
        "Source Occurs": "0...10",
        "Description": "Shipment event details"
    },
    "V901": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "3/3",
        "Source Code List": "CL_ShipmentEventType",
        "Description": "Shipment event code valid values inlcuding:\n\n- APU = Anticipated Pickup\n- VAR = Vessel Arrival\n- VDP = Vessel Departure\n- UFV = Unloaded From Vessel",
        "Sample Input Data/Codes": "APU",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "shipmentEventType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_ShipmentEventType",
        "Sample Output Data/Codes": "ANTICIPATEDPICKUP",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the shpment event type table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_ShipmentEventType.txt with java. \n\nElse if source is missing or invalid , throw error:\n\n\"Valid shipment event type is required in V901 !!!\""
    },
    "V902": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/25",
        "Description": "shipment Event descriptive information",
        "Sample Input Data/Codes": "Vessel arrived",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "eventName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "Vessel arrived",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "V903": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "8/8",
        "Description": "Shipment event time stamp  in YYYYMMDD format",
        "Sample Input Data/Codes": "20070609",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "transportEventTimeStamp",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "20070609",
        "Mapping Notes/Rules": "If V903 and V904 are present, map to target from V903 and V904 in format YYYY-MM-DDTHH:MM:SS.nnnZ.\nIf V903 is present and V904 is missing, map to target from V903 in date format YYYY-MM-DD.\nelse do nothing"
    },
    "V904": {
        "Source Occurs": "0...1",
        "Source Format": "time",
        "Source Length": "'4/8",
        "Description": "Time of reported status of shipment in hhmmss format",
        "Sample Input Data/Codes": "131204",
        "Mapping Notes/Rules": "Do not map"
    },
    "V905": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/30",
        "Description": "Event occurred city name",
        "Sample Input Data/Codes": "Texas",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "city",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "Texas",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "V906": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Event occurred state or province code",
        "Sample Input Data/Codes": "TX",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "state",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "TX",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "V907": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/3",
        "Description": "Event occurred country code",
        "Sample Input Data/Codes": "UK",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "countryCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "UK",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "V908": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "3/3",
        "Source Code List": "CL_TransactionStatusReasonCode",
        "Description": "Reason indicating why a shipment status code was transmitted, valid values including:\n\n- 052 = Import Container Delay\n- A03 = Incorrect Address\n- A07 = Refused by Consignee\n- A10 = Damaged - Delivery Not Completed\n- A15 = Business On Strike\n- A27 = Driver Related",
        "Sample Input Data/Codes": "A03",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "transactionStatusReasonCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CL_TransactionStatusReasonCode",
        "Sample Output Data/Codes": "INCORRECTADDRESS",
        "Mapping Notes/Rules": "if source is present convert from source to target value. Use the transaction status reason code table to convert and validate that source type is correct.\n \nCALL \"com.tracelink.contivo.LookUp.XRefCodeLists\" for lookup file CL_TransactionStatusReasonCode.txt with java. \n\nElse if source is invalid , throw error:\n\n\"Shipment event status reason code is invalid in V908 !!!\""
    },
    "V9013": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Time zone code",
        "Sample Input Data/Codes": "CT",
        "Output Path": "#/data/canonicalOceanShipmentEventDetails",
        "Output Element": "timeZone",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "CT",
        "Mapping Notes/Rules": "Store literal value if present."
    },
    "SE": {
        "Source Occurs": "1...1",
        "Description": "ST ... SE transaction set trailer envelope. Child of GS group. Only one ST transaction expected.",
        "Mapping Notes/Rules": "Create one instance of x12TrailerSegments for the SE transaction trailer"
    },
    "CONSTANT[TRANSACTION]": {
        "Description": "Hard code identifying envelope trailer as SE transaction set trailer.",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "TRANSACTION",
        "Mapping Notes/Rules": "Hard code \"TRANSACTION\" to target if source SE is present."
    },
    "SE01": {
        "Source Occurs": "1...1",
        "Source Format": "integer",
        "Source Length": "1/10",
        "Description": "Total count of segments in ST ... SE transaction set including ST and SE segments.",
        "Sample Input Data/Codes": "10",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentCount",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "10",
        "Mapping Notes/Rules": "Store literal value."
    },
    "SE02": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "4/9",
        "Description": "Transaction set control number",
        "Sample Input Data/Codes": "0001",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "0001",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GE": {
        "Source Occurs": "1...1",
        "Description": "GS ... GE functional group trailer envelope. Child of ISA interchange. Only one GS group expected.",
        "Mapping Notes/Rules": "Create one instance of x12TrailerSegments for the GE group trailer"
    },
    "CONSTANT[GROUP]": {
        "Description": "Hard code identifying envelope trailer as GE functional group trailer.",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "GROUP",
        "Mapping Notes/Rules": "Hard code \"GROUP\" to target if source SE is present."
    },
    "GE01": {
        "Source Occurs": "1...1",
        "Source Format": "integer",
        "Source Length": "1/6",
        "Description": "Number of transaction sets in functional group",
        "Sample Input Data/Codes": "5",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentCount",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "5",
        "Mapping Notes/Rules": "Store literal value."
    },
    "GE02": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/9",
        "Description": "Functional group control number",
        "Sample Input Data/Codes": "619827",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "619827",
        "Mapping Notes/Rules": "Store literal value."
    },
    "IEA": {
        "Source Occurs": "1...1",
        "Description": "ISA ... IEA interchange control trailer envelope. Only one interchange expected per transmission.",
        "Mapping Notes/Rules": "Create one instance of x12TrailerSegments for the IEA group trailer"
    },
    "CONSTANT[INTERCHANGE]": {
        "Description": "Hard code identifying envelope trailer as IEA interchange trailer.",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "INTERCHANGE",
        "Mapping Notes/Rules": "Hard code \"INTERCHANGE\" to target if source SE is present."
    },
    "IEA01": {
        "Source Occurs": "1...1",
        "Source Format": "integer",
        "Source Length": "1/5",
        "Description": "Number of functional groups in interchange.",
        "Sample Input Data/Codes": "1",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentCount",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1",
        "Mapping Notes/Rules": "Store literal value."
    },
    "IEA02": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "9/9",
        "Description": "Interchange control number",
        "Sample Input Data/Codes": "0000000000619827",
        "Output Path": "#/data/controlFileHeader/x12ControlFileHeader/x12TrailerSegments",
        "Output Element": "trailerSegmentIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "0000000000619827",
        "Mapping Notes/Rules": "Store literal value."
    }
}