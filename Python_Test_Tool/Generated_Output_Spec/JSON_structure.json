{
    "format": "JSON",
    "can:CanonicalSOMEventType": {
        "Source Occurs": "1...1",
        "Description": "Root data element"
    },
    "can:ControlFileHeader": {
        "Source Occurs": "1...1",
        "Description": "Header fields"
    },
    "CONSTANT [PRODUCT_TRACK:canonicalSomShipment]": {
        "Description": "Constant Value \"PRODUCT_TRACK:canonicalSomShipment\"",
        "Sample Input Data/Codes": "PRODUCT_TRACK:canonicalSomShipment",
        "Output Path": "JSON",
        "Output Element": "objectType",
        "Target Occurs": "1...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "PRODUCT_TRACK:canonicalSomShipment",
        "Required": "X",
        "Mapping Notes/Rules": "hardcode \"PRODUCT_TRACK:canonicalSomShipment\"."
    },
    "CONSTANT [1]": {
        "Description": "Constant Value \"1\"",
        "Sample Input Data/Codes": "1",
        "Output Path": "JSON",
        "Output Element": "schemaVersion",
        "Target Occurs": "1...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1",
        "Required": "X",
        "Mapping Notes/Rules": "hardcode \"1\"."
    },
    "cmn:FileSenderNumber": {
        "Source Occurs": "1...0",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Identifies sender of transmission. When sender is the publisher, this value used in the service link key to identify service link.\n\nNote: FileSenderNumber made optional in the map source interface.",
        "Sample Input Data/Codes": "8888882028655",
        "Output Path": "JSON/data/controlFileHeader",
        "Output Element": "fileSenderNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "8888882028655",
        "Mapping Notes/Rules": "store literal value if present.\n\nNote: FileSenderNumber made optional in the map source interface."
    },
    "cmn:FileReceiverNumber": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Identifies receiver of transmission. When receiver is the publisher, this value used in the service link key to identify service link.",
        "Sample Input Data/Codes": "8888882028677",
        "Output Path": "JSON/data/controlFileHeader",
        "Output Element": "fileReceiverNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "8888882028677",
        "Mapping Notes/Rules": "store literal value."
    },
    "cmn:FileControlNumber (1)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Unique file identifier assigned by the sender. \n\nInstance 1 of fileControlNumber mapped to JSON/id",
        "Sample Input Data/Codes": "20170821063132",
        "Output Path": "JSON",
        "Output Element": "id",
        "Target Occurs": "1...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "20170821063132",
        "Required": "X",
        "Mapping Notes/Rules": "store literal value."
    },
    "cmn:FileControlNumber (2)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Unique file identifier assigned by the sender. \n\nInstance 2 of fileControlNumber mapped to fileControlNumber.",
        "Sample Input Data/Codes": "20170821063132",
        "Output Path": "JSON/data/controlFileHeader",
        "Output Element": "fileControlNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "20170821063132",
        "Mapping Notes/Rules": "store literal value."
    },
    "cmn:FileDate": {
        "Source Occurs": "1...1",
        "Source Format": "date",
        "Source Length": "10/10",
        "Description": "Date file created in XML date YYYY-MM-DD.",
        "Sample Input Data/Codes": "2017-02-28",
        "Output Path": "JSON/data/controlFileHeader",
        "Output Element": "fileDateTime",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2018-03-30T22:08:02Z",
        "Mapping Notes/Rules": "Concatenate [FileDate] +  \"T\" +[FileTime] ,\nstore concatenated value.\nAppend \"Z\" if not present in FileTime."
    },
    "cmn:FileTime": {
        "Source Occurs": "1...1",
        "Source Format": "time",
        "Source Length": "8/8",
        "Description": "Time file generated in XML HH:MM:SSZ format",
        "Sample Input Data/Codes": "06:31:32Z"
    },
    "cmn:FileTransactionType": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Source Code List": "FileTransactionType",
        "Description": "Name of the XML message type.",
        "Sample Input Data/Codes": "SOM_SHIPMENT_EVENT",
        "Output Path": "JSON/data/controlFileHeader",
        "Output Element": "b2bTransactionTypeName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "FileTransactionType",
        "Sample Output Data/Codes": "SOM_SHIPMENT_EVENT",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:ServiceLinkId": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Service Link ID ... Concatenation of SOM plus FileReceiverNumber and FileSenderNumber.",
        "Sample Input Data/Codes": "SOM.8888882028677.8888882028655",
        "Output Path": "JSON/data/controlFileHeader",
        "Output Element": "linkIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "SOM.8888882028677.8888882028655",
        "Mapping Notes/Rules": "store literal value."
    },
    "cmn:FileControlNumberSuffix": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Optional suffix used by backend to ensure multi-transaction messages have unique control numbers for each embedded file."
    },
    "can:MessageBody": {
        "Source Occurs": "1...1",
        "Mapping Notes/Rules": "Message supports the following events:\n\nCommissionEvent as optional\nAggregationEvent as optional\nShippingEvent as required\n\nShippingEvent is the only event that is required. All others may be present but are optional."
    },
    "cmn:MessageSender": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Canonical message sender",
        "Sample Input Data/Codes": "088202.867701.0",
        "Output Path": "JSON/data/messageBody/messageSender",
        "Output Element": "locationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "088202.867701.0",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@type": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Direct Purchase type\nvalid values:\nENTIRELY_DIRECT\nENTIRELY_INDIRECT\nPARTIALLY_DIRECT",
        "Sample Input Data/Codes": "ENTIRELY_DIRECT",
        "Mapping Notes/Rules": "Do not map"
    },
    "cmn:MessageRecipient": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Canonical message recipient",
        "Sample Input Data/Codes": "033333.101365.0",
        "Output Path": "JSON/data/messageBody/messageRecipient",
        "Output Element": "locationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "088202.867701.0",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:Location": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Location to associate the Transaction Histories when they are created.",
        "Mapping Notes/Rules": "Do not map"
    },
    "cmn:TransactionStatement": {
        "Source Occurs": "0...*",
        "Description": "Transaction Statement"
    },
    "cmn:TransactionStatementIndicator": {
        "Source Occurs": "1...*",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Transaction Statement Indicator",
        "Sample Input Data/Codes": "true",
        "Output Path": "JSON/data/messageBody/transactionStatement",
        "Output Element": "transactionStatementAvailableIndicator",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@statement": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "TransactionStatementType",
        "Description": "Transaction Statement",
        "Sample Input Data/Codes": "AcquiredAsDirectPurchase",
        "Output Path": "JSON/data/messageBody/transactionStatement",
        "Output Element": "transactionStatementType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "TransactionStatementType",
        "Sample Output Data/Codes": "ACQUIREDASDIRECTPURCHASE",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "@statementText": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Transaction Statement Text",
        "Sample Input Data/Codes": "My company conforms with Transaction Statement requirements for products in this shipment.",
        "Output Path": "JSON/data/messageBody/transactionStatement",
        "Output Element": "transactionStatementText",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "My company conforms with Transaction Statement requirements for products in this shipment.",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "can:CommissionEvent": {
        "Source Occurs": "0...*",
        "Description": "Each CommissionEvent contains commission data for one or more serial numbers with the same product attributes (e.g., product code, lot number, expiration date, etc).",
        "Mapping Notes/Rules": "Note: CommissionEvent is optional."
    },
    "can:CommissionEventDetail": {
        "Source Occurs": "1...*",
        "Description": "Each CommissionEventDetail contains commission data detail for one or more serial numbers that were commissioned at the same time and have the same packaging level (e.g., case, eaches).",
        "Mapping Notes/Rules": "Mandatory if CommissionEvent group populated."
    },
    "cmn:EventDateTime": {
        "Source Occurs": "1...1",
        "Source Format": "datetime",
        "Source Length": "0/*",
        "Description": "Timestamp of date/time of shipping event with the UTC time zone indicator in format: YYYY-MM-DDThh:mm:ss.ssZ",
        "Sample Input Data/Codes": "2017-02-28T19:12:53.30Z",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "eventDateTime",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2017-02-28T19:12:53.30Z",
        "Mapping Notes/Rules": "store literal value if present.\nIf Z not present , append Z."
    },
    "cmn:EventTimeZoneOffset": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Time zone offset in effect time and place where event occurred.",
        "Sample Input Data/Codes": "-05:00",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "eventTimeZoneOffset",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "-05:00",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:NumberList": {
        "Source Occurs": "1...1",
        "Description": "Contains the list of topmost containers of serial numbers shipped."
    },
    "cmn:Serial (1)": {
        "Source Occurs": "1...*",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Serial number  expressed in the GS1 Application Identifier format WITHOUT parenthesis for the AI keys. AI (01) (21) formatted serial number for GTINs  -or-  AI (00) formatted serial number for SSCCs.  Non-GS1 serial numbers (e.g., China) are expressed in native format.",
        "Sample Input Data/Codes": "01506820204010342111220207026272",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionEventDetailType/serialNumberList",
        "Output Element": "serialNumberValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "01506820204010342111220207026272",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:Serial (2)": {
        "Source Occurs": "1...*",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Serial number  expressed in the GS1 Application Identifier format WITHOUT parenthesis for the AI keys. AI (01) (21) formatted serial number for GTINs  -or-  AI (00) formatted serial number for SSCCs.  Non-GS1 serial numbers (e.g., China) are expressed in native format.",
        "Sample Input Data/Codes": "01506820204010342111220207026272",
        "Output Path": "JSON/JSON/data/messageBody/commissionEvent",
        "Output Element": "isMultipleGTIN",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "Only Populate if CommissionEvent is for AI(01) + AI(21) serial numbers.\nScan throught the serial number list for a single commission event instance, comparing the GTIN value in all the serial numbers If the GTIN values are the same , populate isMultipleGTIN flag as \"false\". \nIf the GTIN values are different, populate isMultipleGTIN flag as \"true\". \nIf only one serial number in the commission event present, populate as \"false\".\n\nThe GTIN is the string of numbers between the applicaiton code 01 and 21 and will be 14 character in length.\nSerial Number Example:  01506820204010342111220207026272    where as the GTIN = 50682020401034"
    },
    "@companyPrefix": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Company prefix for serial number. Populated by adapter. Not mapped.",
        "Sample Input Data/Codes": "50682020401034",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "companyPrefix",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "50682020401034",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@filterValue": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Filter value associated with SGTIN or SSCC. Populated by adapter. Not mapped.",
        "Sample Input Data/Codes": "2",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "filterValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@format": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Source Code List": "SerialNumberFormat",
        "Description": "Attribute identifies format of serial numbers.",
        "Sample Input Data/Codes": "AI(00)",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "serialNumberFormat",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "AI_01_AI_21",
        "Mapping Notes/Rules": "If source value = \"AI(00)\", hardcode \"AI_00\".\n\nIf source value = \"AI(01)+AI(21)\", hardcode \"AI_01_AI_21\".\n\nIf source value = \"AI(8003)\", hardcode \"AI_8003\".\n\nElse if source present,\nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "@orderItemNumber": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Order item number attribute associating specific serial numbers to the price, VAT and cost taxes reported in a specific instance of OrderItem.",
        "Sample Input Data/Codes": "1",
        "Mapping Notes/Rules": "Do not map"
    },
    "@packLevel": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "pack Level attribute",
        "Sample Input Data/Codes": "PL",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "packLevel",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "EA",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@packedStatus": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "SerialNumberPackedStatus",
        "Description": "packed status attribute",
        "Sample Input Data/Codes": "FULL",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "packedStatus",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "FULL",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value.\n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "@barcodeContent": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "barcode content attribute",
        "Sample Input Data/Codes": "(01)50682020401034(21)11220207026272",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "barcodeContent",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "(01)50682020401034(21)11220207026272",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@purchaseQualifier": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "purchase Qualifier \nvalid values:\nDPS\nRDPS",
        "Sample Input Data/Codes": "RDPS",
        "Mapping Notes/Rules": "Do not map"
    },
    "cmn:FilterValue": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "FilterValue",
        "Description": "Filter value associated with SGTIN or SSCC. Not mapped to OB EPCIS file.",
        "Sample Input Data/Codes": "2",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionEventDetailType",
        "Output Element": "filterValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "FilterValue",
        "Sample Output Data/Codes": "2",
        "Mapping Notes/Rules": "store literal value if present.\n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:PackagingLevel (1)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Source Code List": "PackagingLevel",
        "Description": "The packaging level of the commissioned items in NumberList using the supported enumeration values.",
        "Sample Input Data/Codes": "CA",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/itemDetail/itemCode",
        "Output Element": "packagingUom",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "PackagingLevel",
        "Sample Output Data/Codes": "CA",
        "Mapping Notes/Rules": "If source value = \"TP\", hardcode \"PK\".\n\nIf source value = \"IP\", hardcode \"PK\".\n\nElse\nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:PackagingLevel (2)": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Source Code List": "PackagingLevel",
        "Description": "The packaging level of the commissioned items in NumberList using the supported enumeration values.",
        "Sample Input Data/Codes": "CA",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionEventDetailType",
        "Output Element": "packagingLevel",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "PackagingLevel",
        "Sample Output Data/Codes": "CA",
        "Mapping Notes/Rules": "If source value = \"TP\", hardcode \"PK\".\n\nIf source value = \"IP\", hardcode \"PK\".\n\nElse\nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "can:CommissionCommonAttributes": {
        "Source Occurs": "1...1",
        "Description": "Common attributes for the CommissionEvent."
    },
    "cmn:EventLocation": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Site level SGLN of the location where shipping event occurred. \n\nSGLN format is decimal separated numeric component only, with urn prefix stripped (<company prefix>.<location reference>.<extension> 8888882.02867.0 instead of urn:epc:id:sgln:8888882.02867.0 typically found in EPCIS events).",
        "Sample Input Data/Codes": "888888202867",
        "Output Path": "JSON/data/messageBody/shippingEvent/eventLocationInformation",
        "Output Element": "locationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "888888202867",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:PlantLocationId": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Identifier of plant where products were shipped. Optional field to be used to capture internal identifier.",
        "Sample Input Data/Codes": "PLANT009",
        "Output Path": "JSON/data/messageBody/shippingEvent/plantLocationInformation",
        "Output Element": "locationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "PLANT009",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ProductionLineId": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "The name of the production line on which the packing was done. Most relevant for China product.",
        "Sample Input Data/Codes": "10009",
        "Output Path": "JSON/data/messageBody/aggregationEvent",
        "Output Element": "productionLineIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "10009",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:LineManagerName": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Name of the line/production manager who was on the shift when the batch was produced. Most relevant for China product.",
        "Sample Input Data/Codes": "John Smith",
        "Output Path": "JSON/data/messageBody/aggregationEvent",
        "Output Element": "lineManagerName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "John Smith",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:CompanyPrefix": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Company Prefix",
        "Sample Input Data/Codes": "67751",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType",
        "Output Element": "companyPrefix",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "67751",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "can:ItemDetail": {
        "Source Occurs": "0...1",
        "Description": "Groups item related data elements that are required for products (SGTIN's, NTIN's, China Product Codes) but optional for commissioning SSCC codes (pallets)."
    },
    "cmn:InternalMaterialCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Option 1 for choice%1 in OrderItem. Use to identify the product using the internal material number configured in Product Master Data. Shall be populated if cmn:PackagingItemCode is not populated.",
        "Sample Input Data/Codes": "550599",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList",
        "Output Element": "internalMaterialCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "550599",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ItemCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "The product code for the commissioned item (e.g., GTIN-14).",
        "Sample Input Data/Codes": "50300694220667",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/itemDetail/itemCode",
        "Output Element": "packagingCodeValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "50300694220667",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:CountryDrugCode (1)": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "The national drug code for the commissioned item (e.g., NDC number for US products).",
        "Sample Input Data/Codes": "12345-1234-00",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/itemDetail/countryDrugCode",
        "Output Element": "normalizedItemCodeValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "12345-1234-00",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:CountryDrugCode (2)": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "The national drug code for the commissioned item (e.g., NDC number for US products).",
        "Sample Input Data/Codes": "12345-1234-00",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/itemDetail/countryDrugCode",
        "Output Element": "itemCodeValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "12345-1234-00",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:LotNumber": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "The lot number associated with the InternalMaterialCode, PackagingItemCode or CountryDrugCode specified above that will be used to identify the serial numbers that will be updated.",
        "Sample Input Data/Codes": "LOT123",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList",
        "Output Element": "lotNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "LOT123",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ExpirationDate": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "1/*",
        "Description": "The expiration date for the serialized item, formatted in YYYY-MM-DD format.",
        "Sample Input Data/Codes": "2017-12-31",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList",
        "Output Element": "expirationDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2017-12-31",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ManufacturingDate": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "0/*",
        "Description": "The date of manufacture for the serialized item, formatted in YYYY-MM-DD format.",
        "Sample Input Data/Codes": "2015-01-15",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/itemDetail",
        "Output Element": "manufacturingDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2015-01-15",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:MarketCountryCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "Market country code.",
        "Sample Input Data/Codes": "US",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/itemDetail",
        "Output Element": "marketCountryCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "US",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ExtensionField": {
        "Source Occurs": "0...*",
        "Description": "Customer extension point to pass in 1 or more name/value pairs containing additional data attributes not already supported in this transaction. If this element group is populated both the FieldName and FieldValue elements must be populated.",
        "Mapping Notes/Rules": "Optional group."
    },
    "cmn:FieldName": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Populate with the field name provided by the trade partner that will be receiving the mapped outbound transaction. The field name must match the field name provided by the trade partner exactly, including case so that it can be properly detected in the outbound mapping.",
        "Sample Input Data/Codes": "NDC_CODE"
    },
    "cmn:FieldValue": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Populate with the field value content that corresponds to the FieldName.",
        "Sample Input Data/Codes": "12345678901"
    },
    "cmn:ReferenceDocuments": {
        "Source Occurs": "0...1",
        "Description": "Reference document identifier associated with the commissioning activity."
    },
    "cmn:PONumber": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "PO Number associated with serial number use.",
        "Sample Input Data/Codes": "1001764",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/referenceDocuments",
        "Output Element": "purchaseOrderNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1001764",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:POLine": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "PO Line number.",
        "Sample Input Data/Codes": "000010",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/referenceDocuments",
        "Output Element": "purchaseOrderLineNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "000010",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:WorkOrderNumber": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Work Order number associated with serial number use.",
        "Sample Input Data/Codes": "1001764-00",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/referenceDocuments",
        "Output Element": "workOrderNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1001764-00",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ReferenceIdentifier": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Reference identifier (e.g., any type of identifier) associated with serial number use.",
        "Sample Input Data/Codes": "A100352",
        "Output Path": "JSON/data/messageBody/commissionEvent/somCommissionCommonAttributesType/referenceDocuments",
        "Output Element": "referenceIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "A100352",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "can:AggregationEvent": {
        "Source Occurs": "0...*",
        "Description": "Each AggregationEvent contains packing event data for a parent serial number and linked child serial number list.\n\nTo include a list of packing events for multiple parent serial numbers, repeat the AggregationEvent element.",
        "Mapping Notes/Rules": "Note: AggregationEvent is optional."
    },
    "cmn:ParentSerial": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Serial number  expressed in the GS1 Application Identifier format WITHOUT parenthesis for the AI keys. AI (01) (21) formatted serial number for GTINs  -or-  AI (00) formatted serial number for SSCCs. Non-GS1 serial numbers (e.g., China) are expressed in native format.",
        "Sample Input Data/Codes": "01506820204010342111220207026272",
        "Output Path": "JSON/data/messageBody/aggregationEvent/parentSerialNumber",
        "Output Element": "serialNumberValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "01506820204010342111220207026272",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:PackedStatus": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "SerialNumberPackedStatus",
        "Description": "The packout of the item or container using the supported enumeration values.",
        "Sample Input Data/Codes": "FULL",
        "Output Path": "JSON/data/messageBody/aggregationEvent",
        "Output Element": "packedStatus",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "SerialNumberPackedStatus",
        "Sample Output Data/Codes": "FULL",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value.\n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:PackagingLevel": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "PackagingLevel",
        "Description": "packaing Level",
        "Sample Input Data/Codes": "CA",
        "Output Path": "JSON/data/messageBody/aggregationEvent",
        "Output Element": "packagingLevel",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "PackagingLevel",
        "Sample Output Data/Codes": "CA",
        "Mapping Notes/Rules": "If source value = \"TP\", hardcode \"PK\".\n\nIf source value = \"IP\", hardcode \"PK\".\n\nElse\nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:Quantity": {
        "Source Occurs": "1...1",
        "Source Format": "integer",
        "Source Length": "0/*",
        "Description": "The quanity of items at the EACH (unit) level of the item code",
        "Sample Input Data/Codes": "430",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList",
        "Output Element": "shippedQuantity",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "430",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:Serial": {
        "Source Occurs": "0...*",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Serial number  expressed in the GS1 Application Identifier format WITHOUT parenthesis for the AI keys. AI (01) (21) formatted serial number for GTINs  -or-  AI (00) formatted serial number for SSCCs.  Non-GS1 serial numbers (e.g., China) are expressed in native format.",
        "Sample Input Data/Codes": "01506820204010342111220207026272",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor/previousReceivedIndirectPurchaseNumberlist",
        "Output Element": "serialNumberValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "01506820204010342111220207026272",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "ResetContainerAggregation": {
        "Source Occurs": "0...1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Reset container aggregation boolean flag\nValid Values: \ntrue\nfalse",
        "Sample Input Data/Codes": "true",
        "Output Path": "JSON/data/messageBody/aggregationEvent",
        "Output Element": "isResetContainerAggregation",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "DisaggregateFromParent": {
        "Source Occurs": "0...1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Disaggregate from parent boolean flag\nValid Values: \ntrue\nfalse",
        "Sample Input Data/Codes": "false",
        "Output Path": "JSON/data/messageBody/aggregationEvent",
        "Output Element": "isDisaggregatedFromParent",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "can:ShippingEvent": {
        "Source Occurs": "1...*",
        "Description": "The ShippingEvent contains the information and top level container serial numbers for a single shipment."
    },
    "cmn:DeliveryNumber": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Delivery number for this shipment.",
        "Sample Input Data/Codes": "987654321",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "deliveryNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "987654321",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:CorrectiveShipment": {
        "Source Occurs": "0..1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Optional boolean field that when set to true indicates that a new SOM Receipt is correcting a previously voided SOM Receipt transaction. Default value is false. Valid values:\nfalse \ntrue",
        "Sample Input Data/Codes": "true",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "isCorrectedShipment",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:OriginalDeliveryNumber": {
        "Source Occurs": "0..1",
        "Source Format": "string",
        "Source Length": "'0/*",
        "Description": "Original delivery number. Records original delivery number replaced when shipment voided and corrections made to Shipment.",
        "Sample Input Data/Codes": "987654001",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "originalDeliveryNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "987654001",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:DeliveryCompleteFlag": {
        "Source Occurs": "1...1",
        "Source Format": "boolean",
        "Source Length": "1/*",
        "Description": "The delivery complete flag instructs TraceLink to process the outbound delivery, update the status of all serial numbers and sub-child aggregations to shipped, and trigger generation of regulatory reporting messages based on customer configuration.",
        "Sample Input Data/Codes": "false",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "isDeliveryComplete",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "false",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:DisaggregateFromParent": {
        "Source Occurs": "0...1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Disaggregate from parent boolean flag\nValid Values: \ntrue\nfalse",
        "Sample Input Data/Codes": "false",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "isDisaggregatedFromParent",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "false",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ShipmentType": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "ShipmentType",
        "Description": "Shipment Type",
        "Sample Input Data/Codes": "Sale",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "shipmentType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "ShipmentType",
        "Sample Output Data/Codes": "SALE",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:WarehouseOperatorName": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "1/*",
        "Description": "Name of the person responsible as the warehouse operations (Required for China).",
        "Sample Input Data/Codes": "John Smith",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "warehouseOperatorName",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "John Smith",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:EntryPort": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Entry Port",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "entryPort",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ExitPort": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Exit Port",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "exitPort",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:TransactionIdentifier": {
        "Source Occurs": "0...*",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "The transaction identifier at the line item level, added for Russia compliance. Optional looping element. More than one transaction id may be present. Tracks transaction identifiers at line item level of shipment.",
        "Sample Input Data/Codes": "PO303005",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/transactionIdentifierList",
        "Output Element": "transactionIdentifierValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "PO303005",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@date": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "0/*",
        "Description": "Transaction identifier date attribute. Added to support Russia compliance.",
        "Sample Input Data/Codes": "2019-03-30",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/transactionIdentifierList",
        "Output Element": "businessTransactionDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2019-03-30",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:TransactionDate": {
        "Source Occurs": "1...1",
        "Source Format": "date",
        "Source Length": "1/*",
        "Description": "The date of the transaction in XML YYYY-MM-DD format.",
        "Sample Input Data/Codes": "2017-02-28",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "transactionDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2017-02-28",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:TransactionTime": {
        "Source Occurs": "0...1",
        "Source Format": "time",
        "Source Length": "0/*",
        "Description": "The time of the transaction in XML HH:MM:SS format.",
        "Sample Input Data/Codes": "06:31:32Z",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "transactionTime",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "06:31:32Z",
        "Mapping Notes/Rules": "store literal value if present.\nIf Z not present , append Z."
    },
    "cmn:ShipToCountryCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "ISO country code for ship to country. Provides application with the information it needs to trigger regulatory reporting in response to relevant events.",
        "Sample Input Data/Codes": "US",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "shipToCountryCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "US",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ShipFromCountryCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "2/2",
        "Description": "ISO country code for ship from  country. Provides application with the information it needs to trigger regulatory reporting in response to relevant events.",
        "Sample Input Data/Codes": "US",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "shipFromCountryCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "US",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:SalesDistributionType": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "SalesDistType",
        "Description": "To set this value, compare the ship from country with the ship to country.",
        "Sample Input Data/Codes": "INCOUNTRYSALE",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "salesDistributionType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "SalesDistType",
        "Sample Output Data/Codes": "INCOUNTRYSALE",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:SupplyType": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "SupplyType",
        "Description": "Identifies the type of supply that is being performed using one of the permitted values",
        "Sample Input Data/Codes": "Collection",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "supplyType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "SupplyType",
        "Sample Output Data/Codes": "COLLECTION",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:ContractType": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "ContractType",
        "Description": "Identifies the type of contract for the sale of goods using one of the permitted value",
        "Sample Input Data/Codes": "AgencySalesAgreement",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "contractType",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "ContractType",
        "Sample Output Data/Codes": "AGENCYSALESAGREEMENT",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:DropShipment": {
        "Source Occurs": "0...1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Indicates if shipment is a drop shipment.\nValid values:\ntrue\nfalse",
        "Sample Input Data/Codes": "false",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "isDropShipment",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "false",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:PortalAccessCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Portal Access Code",
        "Sample Input Data/Codes": "649431",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "portalAccessCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "649431",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:Comments": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Optional remarks or comments associated with delivery.",
        "Sample Input Data/Codes": "comments go here",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "comments",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "comments go here",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ContractNumber": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Contract number. Added to support Russia compliance.",
        "Sample Input Data/Codes": "1234567",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "contractNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1234567",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:FundingSource": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "FundingSource",
        "Description": "Funding source. Added to support Russia compliance. Valid values:",
        "Sample Input Data/Codes": "FederalBudgetFunds",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "fundingSource",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "FundingSource",
        "Sample Output Data/Codes": "FEDERALBUDGETFUNDS",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:DeliveryInspection": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "DeliveryInspection",
        "Description": "Inspection status of the physical delivery order against the documentation.",
        "Sample Input Data/Codes": "PASSED",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "deliveryInspection",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "DeliveryInspection",
        "Sample Output Data/Codes": "PASSED",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:DeliveryInspectionDate": {
        "Source Occurs": "0...1",
        "Source Format": "date",
        "Source Length": "0/*",
        "Description": "Date of the physical inspection of the delivery order against the documentation in XML YYYY-MM-DD format.",
        "Sample Input Data/Codes": "2022-12-07",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "deliveryInspectionDate",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "2022-12-07",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:DeliveryInspectionNote": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Comments of the physical inspection of the delivery order against the documentation.",
        "Sample Input Data/Codes": "Inspection Note",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "deliveryInspectionNote",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "Inspection Note",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:RemovalFromCirculation": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "CirculationRemovalReason",
        "Description": "Reason that the product in the delivery is being taken out of the supply chain",
        "Sample Input Data/Codes": "COUNTERFEIT",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "removeFromCirculation",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CirculationRemovalReason",
        "Sample Output Data/Codes": "COUNTERFEIT",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:AggregationInspection": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Source Code List": "AggregationInspection",
        "Description": "Reason that the product in the delivery is being taken out of the supply chain",
        "Sample Input Data/Codes": "IMPLIED",
        "Output Path": "JSON/data/messageBody/shippingEvent",
        "Output Element": "aggregationInspection",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "AggregationInspection",
        "Sample Output Data/Codes": "IMPLIED",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If source value not on enum list, a schema validation error will be thrown."
    },
    "cmn:OrderItemList": {
        "Source Occurs": "0...1",
        "Description": "Order item list group is populated to communicate the pick quantities for each item code at the EACH (unit) level.",
        "Mapping Notes/Rules": "Mapping Note: This group is optional."
    },
    "cmn:OrderItem": {
        "Source Occurs": "1...*"
    },
    "cmn:OrderItemNumber": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Order item number attribute associating specific serial numbers to the price, VAT and cost taxes reported in a specific instance of OrderItem.",
        "Sample Input Data/Codes": "1",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList",
        "Output Element": "orderItemNumber",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "1",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "choice%1": {
        "Source Occurs": "1...1",
        "Source Format": "choice",
        "Description": "Only one of cmn:InternalMaterialCode or cmn:PackagingItemCode should be present.\n\nRegulatory Use:\nMandatory when ShipFromCountryCode = KR"
    },
    "cmn:PackagingItemCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Option 2 for choice%1 in orderItem. Use to identify the product using the packaging level item code (e.g., GTIN-14) configured in Product Master Data. Shall be populated if cmn:InternalMaterialCode is not populated.",
        "Sample Input Data/Codes": "68713854",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/packagingCode",
        "Output Element": "packagingCodeValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "68713854",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:CountryDrugCode": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "The national drug code for the commissioned item (e.g., NDC number for US products).",
        "Sample Input Data/Codes": "12345-1234-00",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/countryDrugCode",
        "Output Element": "itemCodeValue",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "12345-1234-00",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:UnitPrice": {
        "Source Occurs": "0...1",
        "Source Format": "decimal",
        "Source Length": "0/*",
        "Description": "The unit price of an item",
        "Sample Input Data/Codes": "50.87",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/unitPrice",
        "Output Element": "priceValue",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "50.87",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "@currencyCode": {
        "Source Occurs": "1...1",
        "Source Format": "string",
        "Source Length": "3/3",
        "Source Code List": "CurrencyCode",
        "Description": "Currency ISO code using ISO 4217-2015 format. Mandatory if GrossPrice opulated.",
        "Sample Input Data/Codes": "USD",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/grossPrice",
        "Output Element": "currencyCode",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Target Code List": "CurrencyCode",
        "Sample Output Data/Codes": "USD",
        "Mapping Notes/Rules": "If source value present, \nreplace any Hyphen (-) with UnderScore (_), and\nconvert value to all upper case and store value. \n\nNote: If TARGET value not on target schema enum list, a schema validation error will be thrown against the OPUS target schema.   This is a known issue;  LSC canonical does not contain ENUMS but the OPUS Canonical does.  This will get addressed in the next release."
    },
    "cmn:VAT": {
        "Source Occurs": "0...1",
        "Source Format": "decimal",
        "Description": "Value added tax per unit in decimal format.",
        "Sample Input Data/Codes": "152.22",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/valueAddedTax",
        "Output Element": "priceValue",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "152.22",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:GrossPrice": {
        "Source Occurs": "0...1",
        "Source Format": "decimal",
        "Description": "Cost including taxes and fees.",
        "Sample Input Data/Codes": "155.99",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList/grossPrice",
        "Output Element": "priceValue",
        "Target Occurs": "0...1",
        "Target Format": "number",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "155.99",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:IsSerialized": {
        "Source Occurs": "0...1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "Indicates if item is not serialized. If omitted, defaults value to \"true\".",
        "Sample Input Data/Codes": "true",
        "Output Path": "JSON/data/messageBody/shippingEvent/orderItemList",
        "Output Element": "isSerialized",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:SenderInfo": {
        "Source Occurs": "0...1",
        "Description": "Information about the supply chain partner that is sending the shipment.",
        "Mapping Notes/Rules": "Optional group."
    },
    "cmn:FromBusinessPartyLookupId": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Sold from business party lookup Id",
        "Sample Input Data/Codes": "088202.867701.0",
        "Output Path": "JSON/data/messageBody/shippingEvent/senderInformation/fromBusinessPartyLookupIdentifier",
        "Output Element": "locationIdentifier",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "088202.867701.0",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:DirectPurchaseNumberlist": {
        "Source Occurs": "0...1",
        "Description": "Direct Purchase serial number List"
    },
    "cmn:IndirectPurchaseNumberlist": {
        "Source Occurs": "0...1",
        "Description": "Indirect Purchase number serial number list"
    },
    "cmn:DirectPurchaseStatement": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Direct purchase statement",
        "Sample Input Data/Codes": "Direct purchase statement goes here.",
        "Output Path": "JSON/data/messageBody/shippingEvent/directPurchase",
        "Output Element": "directPurchaseStatement",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "Direct purchase statement goes here.",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:ReceivedDirectPurchaseFromPreviousWholesaleDistributor": {
        "Source Occurs": "0...1",
        "Description": "Received Direct Purchase from previous wholesaler distributor"
    },
    "@isEnabled": {
        "Source Occurs": "0...1",
        "Source Format": "boolean",
        "Source Length": "0/*",
        "Description": "is Enabled boolean flag.\nValid values:\ntrue\nfalse",
        "Sample Input Data/Codes": "true",
        "Output Path": "JSON/JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor",
        "Output Element": "isPurchaseQualifierEnabled",
        "Target Occurs": "0...1",
        "Target Format": "boolean",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "true",
        "Mapping Notes/Rules": "store literal value if present."
    },
    "cmn:PreviousReceivedIndirectPurchaseNumberlist": {
        "Source Occurs": "0...1",
        "Description": "Previously received indirect purchase number serial number list"
    },
    "cmn:ReceivedDirectPurchaseFromPreviousWholesaleDistributorStatement": {
        "Source Occurs": "0...1",
        "Source Format": "string",
        "Source Length": "0/*",
        "Description": "Direct purchase statement from wholesaler or distributor",
        "Sample Input Data/Codes": "Direct purchase statement goes here.",
        "Output Path": "JSON/data/messageBody/shippingEvent/receivedDirectPurchaseFromPreviousWholesaleDistributor",
        "Output Element": "receivedDirectPurchaseFromPreviousWholesaleDistributorStatement",
        "Target Occurs": "0...1",
        "Target Format": "string",
        "Target Length": "0/*",
        "Sample Output Data/Codes": "Direct purchase statement goes here.",
        "Mapping Notes/Rules": "store literal value if present."
    }
}